//@version=5
indicator("Chart Elements", overlay = true, precision=2, max_bars_back=5000)



////////////////////////////////////                    SESSION MARKERS


show_session_breaks=input.bool(true, 'Show Session Breaks', group='SESSION BREAKS')

t1 = time_close(timeframe.period, "0930-0931", "America/New_York")
if not na(t1) and show_session_breaks
    line.new(bar_index, 0, bar_index, syminfo.mintick, xloc = xloc.bar_index, extend = extend.both, style = line.style_dotted, color = #696969)

plotshape(t1, 'RTH OPEN', style=shape.labelup, location=location.bottom, color=#ffffff00, offset=12, text='RTH OPEN', textcolor=not na(t1) ? color.gray:#ffffff00, size=size.auto)

t2 = time_close(timeframe.period, "1600-1601", "America/New_York")
if not na(t2)  and show_session_breaks
    line.new(bar_index, 0, bar_index, syminfo.mintick, xloc = xloc.bar_index, extend = extend.both, style = line.style_dotted, color = #696969)

plotshape(t2, 'RTH CLOSE', style=shape.labelup, location=location.bottom, color=#ffffff00, offset=12, text='RTH CLOSE', textcolor=not na(t2) ? color.gray:#ffffff00, size=size.auto)

t3 = time_close(timeframe.period, "0400-0401", "America/New_York")
if not na(t3)  and show_session_breaks
    line.new(bar_index, 0, bar_index, syminfo.mintick, xloc = xloc.bar_index, extend = extend.both, style = line.style_dotted, color = #696969)

plotshape(t3, 'PM OPEN', style=shape.labelup, location=location.bottom, color=#ffffff00, offset=12, text='PM OPEN', textcolor=not na(t3) ? color.gray:#ffffff00, size=size.auto)


t4 = time_close(timeframe.period, "1130-1131", "America/New_York")
if not na(t4)  and show_session_breaks
    line.new(bar_index, 0, bar_index, syminfo.mintick, xloc = xloc.bar_index, extend = extend.both, style = line.style_dotted, color = #6969698a)

plotshape(t4, 'EURO CLOSE', style=shape.labelup, location=location.bottom, color=#ffffff00, offset=12, text='EURO CLOSE', textcolor=not na(t4) ? #787b8686:#ffffff00, size=size.auto)



////////////////////////////////////                    CLOSE PRICE


showclose=input.bool(true, 'Show Close Price', group='CUSTOM CLOSE PRICE')

closeprice=line.new(time+60, close, time, close, xloc=xloc.bar_time, extend = extend.left, color=#ffeb3b00, style=line.style_dotted)
if (barstate.islast)
    line.set_color(closeprice, #fced658e)
line.delete(closeprice[1])



////////////////////////////////////                    PWH/PWL + PDH/PDL


show_pd = input.bool(true, 'Show PDH/PDL', group='PW/PD LEVELS')
show_pw = input.bool(true, 'Show PWH/PWL', group='PW/PD LEVELS')
show_mo = input.bool(true, 'Show Month Open', group='PW/PD LEVELS')
show_wo = input.bool(true, 'Show Week Open', group='PW/PD LEVELS')
condition = not(timeframe.isweekly or timeframe.ismonthly) 

float mo = request.security(syminfo.tickerid,"M",open,barmerge.gaps_off,barmerge.lookahead_on)
float wo = request.security(syminfo.tickerid,"W",open,barmerge.gaps_off,barmerge.lookahead_on)

float pwh = request.security(syminfo.tickerid,"W",high,barmerge.gaps_off,barmerge.lookahead_on) 
float pwl = request.security(syminfo.tickerid,"W",low,barmerge.gaps_off,barmerge.lookahead_on)
float pwc = request.security(syminfo.tickerid,"W",close,barmerge.gaps_off,barmerge.lookahead_on)

float pdh = request.security(syminfo.tickerid,"D",high,barmerge.gaps_off,barmerge.lookahead_on) 
float pdl = request.security(syminfo.tickerid,"D",low,barmerge.gaps_off,barmerge.lookahead_on)
float pdc = request.security(syminfo.tickerid,"D",close,barmerge.gaps_off,barmerge.lookahead_on)

nw = ta.change(time('W'))
nd = ta.change(time('D'))
nm = ta.change(time('M'))

_wcount = ta.barssince(nw)
_dcount = ta.barssince(nd)
_mcount = ta.barssince(nm)

var line _pwh = na
var line _pwl = na

var line _pdh = na
var line _pdl = na

var line _mo = na
var line _wo = na

var label pdh_label = na
var label pdl_label = na

var label pwh_label = na
var label pwl_label = na

var label mo_label = na
var label wo_label = na


get_1800_ny_time(day_offset) =>
    timestamp("America/New_York", year, month, dayofmonth + day_offset, 18, 0)

today_1800 = get_1800_ny_time(0)
tomorrow_1800 = get_1800_ny_time(1)

f_round( _val, _decimals) => 
    // Rounds _val to _decimals places.
    _p = math.pow(10,_decimals)
    math.round(math.abs(_val)*_p)/_p*math.sign(_val)

if (nd) and show_pd
    _pdh := line.new(x1=bar_index, y1=pdh[1], x2=bar_index, y2=pdh[1], color=#808080,width=1, extend=extend.none)
    _pdl  := line.new(x1=bar_index,y1=pdl[1], x2=bar_index, y2=pdl[1], color=#808080,width =1, extend=extend.none)
    line.delete(_pdh[1])
    line.delete(_pdl[1])

    pdh_label := label.new(bar_index, y=pdh, text='PDH:  '+str.tostring(f_round(pdh[1], 2), '#.00'), style=label.style_none, textcolor=#9e9d9d, yloc=yloc.price, xloc=xloc.bar_index)

    label.set_size(pdh_label, size.small)
    label.set_textalign(pdh_label, text.align_left)
    
    pdl_label := label.new(bar_index, y=pdl, text="PDL:  "+str.tostring(f_round(pdl[1], 2), '#.00'), style=label.style_none, textcolor=#9e9d9d, yloc=yloc.price, xloc=xloc.bar_index)

    label.set_size(pdl_label, size.small)
    label.set_textalign(pdl_label, text.align_left)

    label.delete(pdh_label[1])
    label.delete(pdl_label[1])
if (not barstate.islast)
    line.set_x2(_pdh, x=bar_index)
    line.set_x2(_pdl, x=bar_index)
else
    line.set_xloc(_pdh, x1=time[_dcount + 1], x2=time_close + (1 * 2000000), xloc=xloc.bar_time)
    line.set_xloc(_pdl, x1=time[_dcount + 1], x2=time_close + (1 * 2000000), xloc=xloc.bar_time)

    label.set_xloc(pdh_label, x=time_close + 2000000, xloc=xloc.bar_time)
    label.set_xloc(pdl_label, x=time_close + 2000000, xloc=xloc.bar_time)


   

if (nw) and show_pw
    _pwh := line.new(x1=bar_index, y1=pwh[1], x2=bar_index, y2=pwh[1], color=#808080,width=1, extend=extend.none)
    _pwl  := line.new(x1=bar_index,y1=pwl[1], x2=bar_index, y2=pwl[1], color=#808080,width =1, extend=extend.none)
    line.delete(_pwh[1])
    line.delete(_pwl[1])

    pwh_label := label.new(bar_index, y=pwh, text='PWH:  '+str.tostring(f_round(pwh[1], 2), '#.00'), style=label.style_none, textcolor=#9e9d9d, yloc=yloc.price, xloc=xloc.bar_index)
    label.set_xloc(pwh_label, x=time_close + (2000000), xloc=xloc.bar_time)
    label.set_size(pwh_label, size.small)
    label.set_textalign(pwh_label, text.align_left)

    pwl_label := label.new(bar_index, y=pwl, text='PWL:  '+str.tostring(f_round(pwl[1], 2), '#.00'), style=label.style_none, textcolor=#9e9d9d, yloc=yloc.price, xloc=xloc.bar_index)
    label.set_xloc(pwl_label, x=time_close + (2000000), xloc=xloc.bar_time)
    label.set_size(pwl_label, size.small)
    label.set_textalign(pwl_label, text.align_left)

    label.delete(pwh_label[1])
    label.delete(pwl_label[1])
if (not barstate.islast)
    line.set_x2(_pwh, x=bar_index)
    line.set_x2(_pwl, x=bar_index)
else
    line.set_xloc(_pwh, x1=time[_wcount + 1], x2=time_close + (1 * 2000000), xloc=xloc.bar_time)
    line.set_xloc(_pwl, x1=time[_wcount + 1], x2=time_close + (1 * 2000000), xloc=xloc.bar_time)

    label.set_xloc(pwh_label, x=time_close + 2000000, xloc=xloc.bar_time)
    label.set_xloc(pwl_label, x=time_close + 2000000, xloc=xloc.bar_time)




if show_mo
    _mo := line.new(x1=bar_index, y1=mo, x2=bar_index, y2=mo, color=#e679a6bb, style=line.style_dotted, width=1, extend=extend.none)
  
    mo_label := label.new(bar_index, y=mo, text='MONTH OPEN:  '+str.tostring(f_round(mo, 2), '#.00'), style=label.style_none, textcolor=#e679a6, yloc=yloc.price, xloc=xloc.bar_index)
    label.set_xloc(mo_label, x=time_close + (2000000), xloc=xloc.bar_time)
    label.set_size(mo_label, size.small)
    label.set_textalign(mo_label, text.align_left)
    
    line.delete(_mo[1])
    label.delete(mo_label[1])

if (not barstate.islast)
    line.set_x2(_mo, x=bar_index)
else
    line.set_xloc(_mo, x1=time[_mcount + 1], x2=time_close + (1 * 2000000), xloc=xloc.bar_time)

    label.set_xloc(mo_label, x=time_close + 2000000, xloc=xloc.bar_time)

if show_wo
    _wo := line.new(x1=bar_index, y1=wo, x2=bar_index, y2=wo, color=#e679a6bb, style=line.style_dotted, width=1, extend=extend.none)
  
    wo_label := label.new(bar_index, y=wo, text='WEEK OPEN:  '+str.tostring(f_round(wo, 2), '#.00'), style=label.style_none, textcolor=#e679a6, yloc=yloc.price, xloc=xloc.bar_index)
    label.set_xloc(wo_label, x=time_close + (2000000), xloc=xloc.bar_time)
    label.set_size(wo_label, size.small)
    label.set_textalign(wo_label, text.align_left)
    
    line.delete(_wo[1])
    label.delete(wo_label[1])

if (not barstate.islast)
    line.set_x2(_wo, x=bar_index)
else
    line.set_xloc(_wo, x1=time[_wcount + 1], x2=time_close + (1 * 2000000), xloc=xloc.bar_time)

    label.set_xloc(wo_label, x=time_close + 2000000, xloc=xloc.bar_time)


////////////////////////////////////                    TICK


show_tick=input.bool(true, 'Show Tick Markers', group='TICK')
hollow=input.bool(false, 'Hollow Tick Markers', group='TICK')

if timeframe.period=='1' and show_tick
    show_tick:=true
else 
    show_tick:=false

bottom1=false
bottom2=false
top1=false
top2=false

ticklow=request.security('TICK', timeframe.period, low)
tickhigh=request.security('TICK', timeframe.period, high)

if ticklow<-800 and ticklow>-975
    bottom1:=true
if ticklow<=-975
    bottom2:=true
if tickhigh>800 and tickhigh<975
    top1:=true
if tickhigh>=975
    top2:=true
    
[do,dh,dl] = request.security(syminfo.tickerid, "D", [open,high,low], lookahead=barmerge.lookahead_on)

//plot(dh, title=" RTH HOD", color=#bbbbbb63,    linewidth=1, trackprice=true)
//plot(do, title="Open", color=color.yellow, linewidth=1, trackprice=true)
//plot(dl, title=" RTH LOD",  color=#bbbbbb63,  linewidth=1,  trackprice=true)

plotshape(low, 'bottom1', style=shape.circle, location=location.absolute, color=show_tick and bottom1 and not bottom1[1]?#b9ae146e:#ffffff00, size=size.small)
plotshape(low, 'bottom1ac', style=shape.circle, location=location.absolute, color=show_tick and hollow and bottom1 and not bottom1[1]?#101a27:#ffffff00, size=size.tiny)
plotshape(low, 'bottom2', style=shape.circle, location=location.absolute, color=show_tick and bottom2 and not bottom2[1]?#a5a71077:#ffffff00, size=size.normal)
plotshape(low, 'bottom2ac', style=shape.circle, location=location.absolute, color=show_tick and hollow and bottom2 and not bottom2[1]?#101a27:#ffffff00, size=size.small)

plotshape(high, 'top1', style=shape.circle, location=location.absolute, color=show_tick and top1 and not top1[1]?#ca5d2b5e:#ffffff00, size=size.small)
plotshape(high, 'top1ac', style=shape.circle, location=location.absolute, color=show_tick and hollow and top1 and not top1[1]?#101a27:#ffffff00, size=size.tiny)
plotshape(high, 'top2', style=shape.circle, location=location.absolute, color=show_tick and top2 and not top2[1]?#f8000050:#ffffff00, size=size.normal)
plotshape(high, 'top2ac', style=shape.circle, location=location.absolute, color=show_tick and hollow and top2 and not top2[1]?#101a27:#ffffff00, size=size.small)



////////////////////////////////////                    INITIAL BALANCE


// Options
show_ib = input.bool(true, 'Show IB', group = 'INITIAL BALANCE')

show_extra_levels = input.bool(true, "Show extra levels (IBH x2 & IBL x2)", group = 'INITIAL BALANCE')

ib_session = input.session("0930-1000", title="IB PERIOD", group = 'INITIAL BALANCE')
show_intermediate_levels = false
show_ib_calculation_area = false
show_labels = true
fill_ib_areas = true
only_current_levels = input.bool(true, "Only display the current IB Levels", group = 'INITIAL BALANCE')
only_current_zone = input.bool(true, "Only display the current IB calculation area", group = 'INITIAL BALANCE')

show_delta_analytics = input.bool(true, "Display IB delta analytics", group = 'INITIAL BALANCE')

label_size = input.string("Small", title="Label Size", options=["Auto", "Huge", "Large", "Normal", "Small", "Tiny"], group = 'INITIAL BALANCE')
lvl_width = input.int(1, "Daily price level width", group = 'INITIAL BALANCE')
high_col = input.color(#4c7aafbe, "Initial balance High", group = 'INITIAL BALANCE')
low_col = input.color(#eedb70b2, "Initial balance Low", group = 'INITIAL BALANCE')
middle_col = input.color(#ffa826af, "50% initial balance color", group = 'INITIAL BALANCE')
extend_level = input.string("Right", title="Extend current levels", options=["Right", "Left", "Both", "None"], group = 'INITIAL BALANCE')

main_levels_style = input.string("Dashed" , "Main levels line style", options=["Solid", "Dashed", "Dotted"], group = 'INITIAL BALANCE')
ext_levels_style = input.string("Dashed" , "Extended levels line style", options=["Solid", "Dashed", "Dotted"], group = 'INITIAL BALANCE')
int_levels_style = input.string("Dashed" , "Intermediate levels line style", options=["Solid", "Dashed", "Dotted"], group = 'INITIAL BALANCE')

fill_ib_color= input.color(#730ff50c, "IB area background color"), group = 'INITIAL BALANCE'
ext = extend_level == "Right" ? extend.right : extend_level == "Left" ? extend.left : extend_level == "Both" ? extend.both : extend.none

var delta_history = array.new_float(20)

inSession(sess) => na(time(timeframe.period, sess)) == false

get_line_style(s) =>
    s == "Solid" ? line.style_solid : s == "Dotted" ? line.style_dotted : line.style_dashed

get_levels(n) =>
    h = high[1]
    l = low[1]
    for i=1 to n
        if low[i] < l
            l := low[i]
        if high[i] > h
            h := high[i]
    [h, l, (h+l)/2]

var line ibh = na
var line ibl = na
var line ibm = na
var line ib_plus = na
var line ib_minus = na
var line ib_plus2 = na
var line ib_minus2 = na
var line ibm_plus = na
var line ibm_minus = na

var label labelh = na
var label labell = na
var label labelm = na
var label label_plus = na
var label label_minus = na
var label label_plus2 = na
var label label_minus2 = na
var label labelm_plus = na
var label labelm_minus = na
var box ib_area = na

labelSize = (label_size == "Huge") ? size.huge :
     (label_size == "Large") ? size.large :
     (label_size == "Small") ? size.small :
     (label_size == "Tiny") ? size.tiny :
     (label_size == "Auto") ? size.auto : size.normal

var offset = 0

ins = inSession(ib_session)

bgcolor(show_ib_calculation_area and ins ? #673ab730 : na, title="IB calculation zone")
var float ib_delta = na

if ins
    offset += 1
if ins[1] and not ins or not show_ib
    [h, l, m] = get_levels(offset)
    ib_delta := h - l
    if array.size(delta_history) >= 20
        array.shift(delta_history)
    array.push(delta_history, ib_delta)
    
    line.set_extend(ibh, extend.none)
    line.set_extend(ibl, extend.none)
    if show_intermediate_levels
        line.set_extend(ibm, extend.none)
    if show_extra_levels
        line.set_extend(ib_plus, extend.none)
        line.set_extend(ib_minus, extend.none)
        line.set_extend(ib_plus2, extend.none)
        line.set_extend(ib_minus2, extend.none)
        if show_intermediate_levels
            line.set_extend(ibm_plus, extend.none)
            line.set_extend(ibm_minus, extend.none)
    if show_labels
        if only_current_levels
            label.delete(labelh)
            label.delete(labell)
            label.delete(labelm)
            label.delete(label_plus)
            label.delete(label_minus)
            label.delete(label_plus2)
            label.delete(label_minus2)
            label.delete(labelm_plus)
            label.delete(labelm_minus)
        labelh := label.new(bar_index[offset], h, text="IBH 100%: "+str.tostring(h), style=label.style_none, textcolor=high_col, size=labelSize)
        labell := label.new(bar_index[offset], l, text="IBL 0%: "+str.tostring(l), style=label.style_none, textcolor=low_col, size=labelSize)
        if ib_delta > 3
            labelm := label.new(bar_index[offset], m, text="IBM 50%: "+str.tostring(m)+"\nIBΔ: "+str.tostring(h - l), style=label.style_none, textcolor=middle_col, size=labelSize)
        if show_extra_levels
            label_plus := label.new(bar_index[offset], h + ib_delta, text="IBH x2 - "+str.tostring(h + ib_delta), style=label.style_none, textcolor=high_col, size=labelSize)
            label_minus := label.new(bar_index[offset], l - ib_delta, text="IBL x2: "+str.tostring(l - ib_delta), style=label.style_none, textcolor=low_col, size=labelSize)
            label_plus2 := label.new(bar_index[offset], h + (ib_delta*2), text="IBH x3 - "+str.tostring(h + (ib_delta*2)), style=label.style_none, textcolor=high_col, size=labelSize)
            label_minus2 := label.new(bar_index[offset], l - (ib_delta*2), text="IBL x3: "+str.tostring(l - (ib_delta*2)), style=label.style_none, textcolor=low_col, size=labelSize)
    if fill_ib_areas
        if only_current_zone
            box.delete(ib_area)
        ib_area := box.new(bar_index[offset], h, bar_index, l, bgcolor=fill_ib_color, border_color=#00000000)//, extend=ext)
    if only_current_levels
        line.delete(ibh)
        line.delete(ibl)
        line.delete(ibm)
        line.delete(ib_plus)
        line.delete(ib_minus)
        line.delete(ib_plus2)
        line.delete(ib_minus2)
        line.delete(ibm_plus)
        line.delete(ibm_minus)
     
    ibh := line.new(bar_index[offset], h, bar_index, h, color=high_col, extend=ext, width=lvl_width, style=get_line_style(main_levels_style))
    ibl := line.new(bar_index[offset], l, bar_index, l, color=low_col, extend=ext, width=lvl_width, style=get_line_style(main_levels_style))
    //if ib_delta > 3
        //ibm := line.new(bar_index[offset], m, bar_index, m, color=middle_col, style=get_line_style(int_levels_style), extend=ext, width=lvl_width)
    if show_extra_levels
        ib_plus := line.new(bar_index[offset], h + ib_delta, bar_index, h + ib_delta, color=high_col, style=get_line_style(ext_levels_style), extend=ext, width=lvl_width)
        ib_minus := line.new(bar_index[offset], l - ib_delta, bar_index, l - ib_delta, color=low_col, style=get_line_style(ext_levels_style), extend=ext, width=lvl_width)
        ib_plus2 := line.new(bar_index[offset], h + (ib_delta*2), bar_index, h + (ib_delta *2), color=high_col, style=get_line_style(ext_levels_style), extend=ext, width=lvl_width)
        ib_minus2 := line.new(bar_index[offset], l - (ib_delta*2), bar_index, l - (ib_delta*2), color=low_col, style=get_line_style(ext_levels_style), extend=ext, width=lvl_width)        
        //if ib_delta > 3
            //ibm_plus := line.new(bar_index[offset], h + (ib_delta/2), bar_index, h + (ib_delta/2), color=middle_col, style=get_line_style(int_levels_style), extend=ext, width=lvl_width)
            //ibm_minus := line.new(bar_index[offset], l - (ib_delta/2), bar_index, l - (ib_delta/2), color=middle_col, style=get_line_style(int_levels_style), extend=ext, width=lvl_width)
    offset := 0

if (not ins) and (not ins[1]) and show_ib
    line.set_x2(ibh, bar_index)
    line.set_x2(ibl, bar_index)
    //if ib_delta > 3
        //line.set_x2(ibm, bar_index)
    if show_extra_levels    
        line.set_x2(ib_plus, bar_index)
        line.set_x2(ib_minus, bar_index)
        line.set_x2(ib_plus2, bar_index)
        line.set_x2(ib_minus2, bar_index)        
        //if ib_delta > 3
            //line.set_x2(ibm_plus, bar_index)
            //line.set_x2(ibm_minus, bar_index)

var table ib_analytics = table.new(position.bottom_left, 2, 6)

ib_sentiment() =>
    h = array.max(delta_history)
    l = array.min(delta_history)
    a = array.avg(delta_history)
    
    h_comp = ib_delta > h ? ib_delta - h : (ib_delta - h) * -1
    l_comp = ib_delta > l ? ib_delta - l : (ib_delta - l) * -1
    a_comp = ib_delta > a ? ib_delta - a : (ib_delta - a) * -1
    (h_comp < l_comp and h_comp < a_comp) ? "Huge" : (l_comp < h_comp and l_comp < a_comp) ? "Small" : "Medium"

if not show_ib
    line.delete(ibh)
    line.delete(ibl)
    line.delete(ibm)      
    line.delete(ib_plus)
    line.delete(ib_minus)
    line.delete(ib_plus2)
    line.delete(ib_minus2)
    line.delete(ibm_plus)
    line.delete(ibm_minus)
    label.delete(labelh)
    label.delete(labell)
    label.delete(labelm)
    label.delete(label_plus)
    label.delete(label_minus)
    label.delete(label_plus2)
    label.delete(label_minus2)
    label.delete(labelm_plus)
    label.delete(labelm_minus)

if show_delta_analytics and show_ib
    table.cell(ib_analytics, 0, 0, "IB Delta", bgcolor=color.black, text_color=color.white)
    table.cell(ib_analytics, 0, 1, "20D MAX", bgcolor=color.black, text_color=color.white)
    table.cell(ib_analytics, 1, 1, str.tostring(array.max(delta_history), "#.####"), bgcolor=color.black, text_color=high_col)
    table.cell(ib_analytics, 0, 2, "20D AVG", bgcolor=color.black, text_color=color.white)
    table.cell(ib_analytics, 1, 2, str.tostring(array.avg(delta_history), "#.####"), bgcolor=color.black, text_color=middle_col)
    table.cell(ib_analytics, 0, 3, "20D MIN", bgcolor=color.black, text_color=color.white)
    table.cell(ib_analytics, 1, 3, str.tostring(array.min(delta_history), "#.####"), bgcolor=color.black, text_color=low_col)
    table.cell(ib_analytics, 0, 4, "Today", bgcolor=color.black, text_color=color.white)
    table.cell(ib_analytics, 1, 4, str.tostring(ib_delta), bgcolor=color.black, text_color=color.blue)
    table.cell(ib_analytics, 0, 5, "Status", bgcolor=color.black, text_color=color.white)
    table.cell(ib_analytics, 1, 5, ib_sentiment() , bgcolor=color.black, text_color=color.white)
